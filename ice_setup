#!/bin/bash  

set -o errexit  

readonly   PN=$(basename ${0^^}) ; 
readonly   BasePath=/usr/share/
readonly   binexec=/usr/bin/
readonly   RootUID=$((0x000)) 
exe=
#fetching  executable  from Makefile 
[[ -f Makefile  ]] &&  { 
    execsrc=`sed -n 4,4p Makefile`
    exe=${execsrc##*=}
}
[[  "root::permission" ]]  
{ 
     [[   ${UID} -ne  ${RootUID} ]]  && {
        echo -e " require  root  user  ..."   
        read -p "root password: "  -s -t $((0x000F))
        if [[ -n  ${REPLY} ]]  ; then 
           sudo  -s  <<<  ${REPLY}  ./${PN,,} 
            test $? -eq 0 ||  {
                 echo -e "ROAuth  failed" 
                 exit 3 
            } 
        else
             exit 3 
        fi
     }
}

echo -e  " building ice  main directory  ..." 
sleep $((0x0002))  

default_source  () {
    local  root_dir=${BasePath}$(basename ${0%%_*})  
    if [[ ! -d  $root_dir ]]   ; then 
        mkdir  $root_dir
        [[ $?  -ne 0  ]]  && {
            echo  -e "failed ... " 
            exit 3 
        }||{
            return 0  
        }  
    else  
        echo  " nothing to do  evrything is oOK ..." 
        exit 0     
    fi

}
default_source
test $? -eq  0  && {  
    echo  "copying source  ->  ${BasePath}$(basename  ${0%%_*})" 
    sleep $((0x0002))  
      if [[ -d  defsrc  ]]   ; then 
        read  -a files  <<< $(echo  `ls  -r  defsrc`)   
        if [[ ${#files[@]}  -eq $((0x003)) ]] ; then 
           
            cp  -R  defsrc ${BasePath}$(basename ${0%%_*})
            test $? -eq 0  && echo -e "[ done ]"
            
            #  show tracing  to see what happen   
            for  file  in ${files[@]} ;  do  
                echo -e " $file  -> ${BasePath}$(basename ${0%%_*})"
                sleep  0.5   
            done 

        else  
            echo -e  "something  wrong  :  missing  file "  
            echo -e  "please report this error  to - >  <funscript@outlook.fr>"
            echo -e  "or declare an issue  to      - >  <https://github.com/Jukoo/iCe>"  
            exit  3  
        fi 
fi
} 

if  [[  ! -x ${binexec}$exe ]] ; then 
     if [[ -x ${binexec}make ]]  ; then  
        make all    
        if [[  -x  $exe  ]]   ; then
            echo -e  "building ..." 
            sleep 2
            cp  ${exe} ${binexec}  
            test $?  -ne  0  && { 
                echo -e "buil failed ... "
                exit $?  
            }
        fi
    else 
        echo "undefined  make "
        exit 3 
    fi
else  
    echo -e "$exe is already set  ..."
    which $exe  
fi  

  
